<?php
/**
 * Created by PhpStorm.
 * User: ELL
 * Date: 05/12/2017
 * Time: 11.02
 */

namespace backend\controllers\operator;

use backend\models\Agama;
use backend\models\Pekerjaan;
use backend\models\Pendidikan;
use backend\models\Rtrw;
use backend\models\Uploader;
use Yii;
use yii\base\Exception;
use yii\helpers\Url;
use backend\controllers\BaseController;
use backend\models\Penduduk;
use backend\models\Dusun;
use yii\web\UploadedFile;

class PendudukController extends BaseController
{
    public function behaviors()
    {
        return parent::behaviors(); // TODO: Change the autogenerated stub
    }
    public function actions()
    {
        return parent::actions(); // TODO: Change the autogenerated stub
    }
    public function  actionIndex()
    {
        if (!parent::isLogin()) {
            return $this->redirect(Url::toRoute('site/login'));
        }


        $data = Penduduk::find()->all();
        $sesi = $this->activeUser;
        $isAdmin = $this->isAdmin();

        $params = [
            'data' => $data,
            'sesi' => $sesi,
            'isAdmin' => $isAdmin
        ];
        if (Yii::$app->request->isPost) {
            return $this->renderPartial('index.tpl', $params);
        } else {
            return $this->render('index.tpl', $params);
        }
    }
    public  function actionForm(){
        $id = Yii::$app->request->post('id', 0);
        if ($id) {
            $data = Penduduk::findOne($id);
        } else {
            $data = new Penduduk();
        }
        $rtOption = [];
        $rt=Rtrw::find()->all();
        $rt2=Rtrw::find()->all();
        foreach ($rt as $item){
            foreach ($rt2 as $item2){
                if($item->rt_child != $item2->id){
                    continue;
                }
                if($item->rt_child == $item2->id && $item->rt_child !=0){
                    $rtOption[$item->id]=$item->dusun->nama_dusun.'-'.$item2->rw_parent.'-'.$item->rw_parent;
                }
            }
        }
        $agamaOption=[];
        $agama=Agama::find()->all();
        foreach ($agama as $item){
            $agamaOption[$item->id]=$item->nama;
        }
        $pekerjaanOption=[];
        $pekerjaan=Pekerjaan::find()->all();
        foreach ($pekerjaan as $item){
            $pekerjaanOption[$item->id]=$item->nama;
        }
        $pendidikanOption=[];
        $pendidikan=Pendidikan::find()->all();
        foreach ($pendidikan as $item){
            $pendidikanOption[$item->id]=$item->nama;
        }
        $params = [
            'data' => $data,
            'rtOption' => $rtOption,
            'agamaOption'=>$agamaOption,
            'pekerjaanOption'=>$pekerjaanOption,
            'pendidikanOption'=>$pendidikanOption
        ];
        return $this->renderPartial('form.tpl',$params);
    }
    public function actionSave()
    {
        $id = Yii::$app->request->post('id', 0);
        if ($id) {
            $data = Penduduk::findOne($id);
        } else {
            $data = new Penduduk();
        }
        $nik=Yii::$app->request->post('nik', '');
        if(strlen($nik)<16){
            return "
                <div class='alert alert-danger'>Terjadi kesalahan! NIK harus 16 digit</div>";
        }

        $data->nik=$nik;
        $data->nama_lengkap=Yii::$app->request->post('nama_lengkap', '');
        $data->tempat_lahir=Yii::$app->request->post('tempat_lahir', '');
        $data->tanggal_lahir=Yii::$app->request->post('tanggal_lahir', '');
        $data->jenis_kelamin=Yii::$app->request->post('jenis_kelamin', '');
        $data->status_perkawinan=Yii::$app->request->post('status_perkawinan', '');
        $data->rt_rw_id = Yii::$app->request->post('rt_rw_id', '');
        $data->agama_id = Yii::$app->request->post('agama_id','');
        $data->pekerjaan_id = Yii::$app->request->post('pekerjaan_id','');
        $data->pendidikan_id = Yii::$app->request->post('pendidikan_id','');
        try {
            $data->save();
            return "
            <div class='alert alert-success'>Data berhasil disimpan</div>
            <script> reloadData(); closeModal(1500); </script>";
        } catch (Exception $e) {
            return "
            <div class='alert alert-danger'>Terjadi kesalahan! Data gagal disimpan</div>";
        }
    }
    public function actionFormImport()
    {
        return $this->renderPartial('form-import.tpl');

    }

    public function actionUploadImport(){
        if (!file_exists('uploads/temp')) {
            mkdir('uploads/temp', 0777, true);
        }
        $file = new Uploader();
        $file->extension = ['xls', 'xlsx'];
        $file->destination = 'uploads/temp/';
        $file->file = UploadedFile::getInstance($file, 'file');
        if ($file->upload()) {
            $filename = $file->uploadedFile;
        } else {
            return "
            <div class='alert alert-danger'>Terjadi kesalahan! Data gagal diunggah</div>";
        }

        $objPHPExcel = \PHPExcel_IOFactory::load("uploads/temp/$filename");
        $sheetData = $objPHPExcel->getActiveSheet()->toArray(null, true, true, true);
        @unlink("uploads/temp/$filename");

        $field = 'A';
        $header = [
            $field++ => 'NO',
            $field++ => 'NIK',
            $field++ => 'NAMA PENDUDUK',
            $field++ => 'TEMPAT LAHIR',
            $field++ => 'TANGGAL LAHIR',
            $field++ => 'JENIS KELAMIN',
            $field++ => 'STATUS PERKAWINAN',
            $field++ => 'RT/RW',
            $field++ => 'AGAMA',
            $field++ => 'PENDIDIKAN',
            $field++ => 'PEKERJAAN',

        ];

        // limit data berdasarkan header
        $newSheetData = [];
        $limit = count($header);
        foreach ($sheetData as $key => $value) {
            $newSheetData[$key] = [];
            $counter = 0;
            foreach ($value as $key2 => $value2) {
                if ($counter >= $limit) {
                    break;
                }
                $newSheetData[$key][$key2] = $value2;
                $counter++;
            }
        }
        $sheetData = $newSheetData;
        if (!isset($sheetData[1]) || $sheetData[1] != $header) {
            return "
            <div class='alert alert-danger'>Terjadi kesalahan! Format data tidak sesuai!</div>";
        }

        $data = [];
        $nData = 0;
        for ($i = 2; ; $i++) {
            if (!isset($sheetData[$i])) {
                break;
            } else if (!isset($sheetData[$i]['B']) || strlen($sheetData[$i]['B']) == 0) {
                break;
            } else {
                $nData++;
                $data[] = [
                    'nik' => $sheetData[$i]['B'],
                    'nama_lengkap' => $sheetData[$i]['C'],
                    'tempat_lahir' => $sheetData[$i]['D'],
                    'tanggal_lahir' => $sheetData[$i]['E'],
                    'jenis_kelamin' => $sheetData[$i]['F'],
                    'status_perkawinan'=> $sheetData[$i]['G'],
                    'rt_rw'=> $sheetData[$i]['H'],
                    'agama'=> $sheetData[$i]['I'],
                    'pendidikan'=> $sheetData[$i]['J'],
                    'pekerjaan'=> $sheetData[$i]['K'],
                ];
            }
        }
        if ($nData == 0) {
            return "
            <div class='alert alert-danger'>Terjadi kesalahan! Tidak ada data di import!</div>";
        }
        $key = md5('import-data' . mt_rand() . mt_rand());
        Yii::$app->session->set($key, $data);

        $params = [
            'key' => $key,
            'data' => $data,
        ];
        return $this->renderPartial('preview-import.tpl', $params);
    }

    public  function actionSaveImport(){
        $key = Yii::$app->request->post('key');
        $data = Yii::$app->session->get($key, null);
        Yii::$app->session->remove($key);
        if (is_null($data)) {
            return "
            <div class='alert alert-danger'>Terjadi kesalahan! Tidak ada data di import!</div>";
        }

        $nImported = 0;
        $error = [];

        $transaction = Penduduk::getDb()->beginTransaction();
        try {

            foreach ($data as $item) {
                $model = Penduduk::find()->where(['nik' => $item['nik']])->one();
                if (is_null($model)) {
                    $model = new Penduduk();
                    $model->nik = strip_tags($item['nik']);
                    $model->nama_lengkap = strip_tags($item['nama_lengkap']);
                    $model->tempat_lahir =$item['tempat_lahir'];
                    $model->tanggal_lahir=$item['tanggal_lahir'];
                    $model->jenis_kelamin =$item['jenis_kelamin'];
                    $model->status_perkawinan =$item['status_perkawinan'];
                    try {
                        $model->save();
                        $nImported++;
                    } catch (Exception $ex) {
                        $errorMsg = "
                             <li>Terjadi kesalahan! Penduduk dengan " . $item['nik'] . " gagal disimpan! </li>";
                        if (!in_array($errorMsg, $error)) {
                            $error[] = $errorMsg;
                        }
                    }
                }

            }
            if (count($error) < 1) {
                $transaction->commit();
                return "
                    <div class='alert alert-success'>$nImported data berhasil diimport!</div>
                    <script> closeModal(1500); reloadData(); </script>";
            } else {
                $transaction->rollBack();
                echo "<div class='alert alert-danger'>
                        <ol>";
                foreach ($error as $item) {
                    echo $item;
                }

                echo "</ol></div>";
            }
        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }
    }
    public function actionDelete(){

    }

}